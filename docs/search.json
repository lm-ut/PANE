[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 PANE authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Tutorial.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Tutorial","text":"PANE R package leverages PCA NNLS (Non-Negative Least Squares) assess ancestral composition admixed individuals high accuracy reliability, approach described . PANE assigns genetic ancestry list target samples populations given list putative sources. PANE estimations based PCA targets source groups available, along suggest use additional groups better define PC space. PC space defined, set NNLS applied PC coordinates, effectively summarizing genetic ancestry. basic usage PANE needs: PCA matrix (dataframe N PCs) list target source groups (samples)","code":""},{"path":"/articles/Tutorial.html","id":"basic-usage-example","dir":"Articles","previous_headings":"","what":"Basic usage example","title":"Tutorial","text":"Right can find basic way run PANE, want details, please keep reading. PANE package two functions read PCA matrix, read_eigen() read_flash(). * read_eigen() read PCA created smartpca EIGENSOFT software. * read_flash() instead, read PCA created flashpca software. goal functions set PCA file looks follows: neither read_eigen() read_flash() , might want simply use read.table(), set file aforementioned look. sake example, say obtained PCA software EIGENSOFT, using smartpca. second step set 'AS_file', file list Admixed groups () Source groups (S). want use PANE sample-wise rather group-wise, simply adjust PCA file 'POP' column identical 'IND' column, set AS_file samples list, rather group list. AS_file two-columns file population list first column, '/S' information second column. '/S' information stands Admixed () Source (S), population/group indicate whether PANE consider Source (S) admixed target (), file looks like : read AS_file, simple read_table(file, header=T) sufficient. PCA AS_file loaded, finally ready run PANE follows: can avoid relying AS_file wish, rather use vector target source groups directly pane() function, follows: Finally, want save PANE results table-like format, can use write_pane(), way:","code":"$ pca = read_eigen(pca_input = 'data/TOY.pca.evec') $ PANE_result = pane(pca_input = pca, sources = c('GST1','GST2'), admixed=c('70GST1.30GST2')) $ pca = read_eigen(pca_input = 'data/TOY.pca.evec') $ AS_file = read.table('data/Example_AS', header=TRUE) $ PANE_result = pane(pca_input = pca, as_file = AS_file) $ PANE_result = pane(pca_input = pca, sources = c('GST1','GST2'), admixed=c('70GST1.30GST2')) $ PANE_result <- pane(pca_input = pca, sources = c('GST1','GST2'), admixed=c('70GST1.30GST2')) $ write_pane(PANE_input = v_result, output_name = 'my_dir/my_PANE_results.txt')"},{"path":"/articles/Tutorial.html","id":"plotting","dir":"Articles","previous_headings":"","what":"Plotting","title":"Tutorial","text":"function plot_pane() can help plot pane() results. Based preferences, can either rely basic R ggplot2 plot results. say want plot PANE results using ggplot2: Alternatively, plot basic R, just run command without type_ggplot option, like : find barplot working directory.","code":"$ PANE_result <- pane(pca_input = pca, sources = c('GST1','GST2'), admixed=c('70GST1.30GST2')) $ plot_pane(PANE_result, 'PANE_plot', type_ggplot = 'YES') $ PANE_result <- pane(pca_input = pca, sources = c('GST1','GST2'), admixed=c('70GST1.30GST2')) $ plot_pane(PANE_result, 'PANE_plot')"},{"path":"/articles/Tutorial.html","id":"euclidean-distances-between-sources","dir":"Articles","previous_headings":"","what":"Euclidean Distances between Sources","title":"Tutorial","text":"function pcs_distances allows estimate visualize Euclidean Distances (ED) pairs sources. run function need provide: pca_input takes pca matrix output_name string path output file name sources_file two-columns table list source pairs test: return_plot = 'YES'/NULL allows decide whether plot distances ('YES') (NULL)","code":"$ pca = read_eigen(pca_input = 'data/TOY.pca.evec') $ Source_D = read.table('data/Sources_Distances', header =T) $ pcs_distances(pca_input = pca, output_name = 'my/res/dir/output_file', sources_file = Source_D, return_plot = 'YES')"},{"path":"/articles/Tutorial.html","id":"resampling","dir":"Articles","previous_headings":"","what":"Resampling","title":"Tutorial","text":"produce Standard Errors (SE), can rely resampling techniques. say produce 20 PCAs estimate SE, dataset different SNPs subset: thus end 20 PCAs, slighly different values PC coordinates. function read.resampling() reads 20 PCAs perform PANE . return list containing results resampling (20 PANE results). Given read.resampling() read perform PANE resampled set, function uses several arguments: )path_tofiles: path directory 20 PCAs stored II)file_pattern, string containing name shared 20 PCAs, function use string pattern find files said string. parameter seems confusing, consider modelled function considering resampling setting one name PCAs follows: 'PCA_Resampled_1', 'PCA_Resampled_2',...,'PCA_Resampled_20'. file_patters 'PCA_Resampled_' find files 'PCA_Resampled_1' 'PCA_Resampled_20'. III)as_file, AS_file used pane(). two-columns file population list first column, '/S' information second column. '/S' information stands Admixed () Source (S), population/group indicate whether PANE consider Source (S) admixed target (), file looks like : eigentype, optional argument. present, PCA read read_eigen() function, absent PCA loaded via read_flash(). , function can ran : ran PANE 20 resampled PCAs, estimate SE can use se.resampling() function. , need: * main PANE results, obtained pane() main PCA (PCA available SNPs), * PANE results obtained 20 resampled PCAs (function read.resampling() can see ). example , can see first loaded AS_file read.table(), PANE main results obtained pane(), PANE resampling results obtained read.resampling(). Importantly, ran se.resampling(), also need numeric vector containing number SNPs per chromosome (ie. chromovec = rep(1000,times = 4), 1000 number SNPs used per 4 PCA ran tutorial).","code":"$ AS_file = read.table('data/Example_AS', header=TRUE) $ PANE_resampling = read.resampling(path_tofiles = 'data/', file_pattern = 'TOY_Jack', as_file = AS_file, eigentype) $ main_pca = read_eigen(pca_input = 'data/TOY.pca.evec') $ AS_file = read.table('data/Example_AS', header=TRUE) $ PANE_main_result <- pane(pca_input = main_pca, as_file = AS_file) $ PANE_resampling = read.resampling(path_tofiles = 'data/', file_pattern = 'TOY_Jack', as_file = AS_file, eigentype) $ chromovec = rep(1000,times = 4) $ PANE_SE = se.resampling(PANE_main_result, PANE_resampling, chromovec)"},{"path":"/articles/Tutorial.html","id":"evaluate-models","dir":"Articles","previous_headings":"","what":"Evaluate Models","title":"Tutorial","text":"function evaluate_models() tests possible models outputs list unfit models, indicated negative performance scores. Additionally, return best fit model, allowing easily identify effective solution analysis. harness evaluate_models() effectively, essential use combination several possible sources targets, ensuring comprehensive evaluation models. function output list iterations tested along residuals. negative values indicate unfit model, also residuals can insightful model. High residuals indicate tested model optimal, multiple model different residuals suggest select ones smallest residuals values.","code":"$ main_pca = read_eigen(pca_input = 'data/TOY.pca.evec') $ AS_file = read.table('data/Example_AS', header=TRUE) $ PANE_models <- evaluate_models(pca_input = main_pca, as_file = AS_file) #OR $ PANE_models <- evaluate_models(pca_input = main_pca, sources = c(\"AFR1\",\"AFR2\",\"EUR1\",\"EUR2\",\"ASN1\",\"ASN2\"), admixed = c(\"70GST1.30GST2\"))"},{"path":"/articles/my-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"PANE-vignette","text":"PANE R package leverages PCA NNLS (Non-Negative Least Squares) assess ancestral composition admixed individuals high accuracy reliability, approach described PANE - Principal component Ancestry proportions using NNLS Estimation\" De Gennaro & Molinaro et al, Journal, Year, doi. PANE assigns genetic ancestry list target samples populations given list putative sources. PANE estimations based PCA targets source groups available, along suggest use additional groups better define PC space. PC space defined, set NNLS applied PC coordinates, effectively summarizing genetic ancestry. basic usage PANE needs: PCA matrix (dataframe N PCs) list target source groups (samples)","code":""},{"path":"/articles/my-vignette.html","id":"basic-usage-example","dir":"Articles","previous_headings":"","what":"Basic usage example","title":"PANE-vignette","text":"Right can find basic way run PANE, want details, please keep reading. PANE package two functions read PCA matrix, read_eigen() read_flash(). * read_eigen() read PCA created smartpca EIGENSOFT software. * read_flash() instead, read PCA created flashpca software. goal functions set PCA file looks follows: neither read_eigen() read_flash() , might want simply use read.table(), set file aforementioned look. sake example, say obtained PCA software EIGENSOFT, using smartpca. second step set 'AS_file', file list Admixed groups () Source groups (S). want use PANE sample-wise rather group-wise, simply adjust PCA file 'POP' column identical 'IND' column, set AS_file samples list, rather group list. AS_file two-columns file population list first column, '/S' information second column. '/S' information stands Admixed () Source (S), population/group indicate whether PANE consider Source (S) admixed target (), file looks like : read AS_file, simple read_table(file, header=T) sufficient. PCA AS_file loaded, finally ready run PANE follows: can avoid relying AS_file wish, rather use vector target source groups directly pane() function, follows: Finally, want save PANE results table-like format, can use write_pane(), way:","code":"$ pca = read_eigen(pca_input = 'data/TOY.pca.evec') $ PANE_result = PANE(pca_input = pca, sources = c('ESN','CEU'), admixed=c('GIH')) $ pca = read_eigen(pca_input = 'data/TOY.pca.evec') $ AS_file = read.table('data/Example_AS_eigen', header=TRUE) $ PANE_result = pane(pca_input = pca, as_file = AS_file) $ PANE_result = pane(pca_input = pca, sources = c('ESN','CEU'), admixed=c('GIH')) $ PANE_result <- pane(pca_input = pca, sources = c('ESN','CEU'), admixed=c('GIH')) $ write_PANE(PANE_input = PANE_result, output_name = 'my_dir/my_pane_results.txt')"},{"path":"/articles/my-vignette.html","id":"plotting","dir":"Articles","previous_headings":"","what":"Plotting","title":"PANE-vignette","text":"function plot_pane() can help plot pane() results. Based preferences, can either rely basic R ggplot2 plot results. say want plot PANE results using ggplot2: Alternatively, plot basic R, just run command without type_ggplot option, like : find barplot working directory.","code":"$ PANE_result <- pane(pca_input = pca, sources = c('ESN','CEU'), admixed=c('GIH')) $ plot_pane(PANE_result, 'PANE_plot', type_ggplot = 'YES') $ PANE_result <- pane(pca_input = pca, sources = c('ESN','CEU'), admixed=c('GIH')) $ plot_pane(PANE_result, 'PANE_plot')"},{"path":"/articles/my-vignette.html","id":"selecting-the-optimal-number-of-pcs","dir":"Articles","previous_headings":"","what":"Selecting the optimal number of PCs","title":"PANE-vignette","text":"","code":"$ PANE_main_result <- pane(pca_input = main_pca, sources = c('ESN','CEU'), admixed=c('GIH')) $ pcs_distances(pca_input, output_name, sources_file, return_plot = NULL)"},{"path":"/articles/my-vignette.html","id":"resampling","dir":"Articles","previous_headings":"","what":"Resampling","title":"PANE-vignette","text":"produce Standard Errors (SE), can rely resampling techniques. say produce 20 PCAs estimate SE, dataset different SNPs subset: thus end 20 PCAs, slighly different values PC coordinates. function read.resampling() reads 20 PCAs perform PANE , return list containing results resampling (20 PANE results). Given read.resampling() read perform PANE resampled set, function uses several arguments: path_tofiles, path directory 20 PCAs stored file_pattern, string containing name shared 20 PCAs, function use string pattern find files said string. parameter seems confusing, consider modelled function considering resampling setting one name PCAs follows: 'PCA_Resampled_1', 'PCA_Resampled_2',...,'PCA_Resampled_20'. file_patters 'PCA_Resampled_' find files 'PCA_Resampled_1' 'PCA_Resampled_20'. as_file, AS_file used PANE(). two-columns file population list first column, '/S' information second column. '/S' information stands Admixed () Source (S), population/group indicate whether PANE consider Source (S) admixed target (), file looks like : eigentype, optional argument, present, PCA read read_eigen() function, absent PCA loaded via read_flash(). , function can ran : ran PANE 20 resampled PCAs, estimate SE can use se.resampling() function. , need main PANE results, obtained pane() main PCA (PCA available SNPs), PANE results obtained 20 resampled PCAs (funtion read.resampling() can see ). example , can see first loaded AS_file read.table(), PANE main results obtained pane(), PANE resampling results obtained read.resampling(). Importantly, ran se.resampling(), also need number resampled analyses ran, tutorial ran 20 PCAs, therefore parameter 'chromovec' set 20 (integer).","code":"$ AS_file = read.table('data/Example_AS_eigen', header=TRUE) $ PANE_resampling = read.resampling(path_tofiles = 'where/I/stored/my/PCAs/', file_pattern = 'PCA_Resampled_', as_file = AS_file, eigentype) $ main_pca = read_eigen(pca_input = 'data/TOY.pca.evec') $ AS_file = read.table('data/Example_AS_eigen', header=TRUE) $ PANE_main_result <- pane(pca_input = main_pca, as_file = AS_file) $ PANE_resampling = read.resampling(path_tofiles = 'where/I/stored/my/resampled/PCAs/', file_pattern = 'PCA_Resampling_', as_file = AS_file, eigentype) $ chromovec = 20  $ PANE_SE = se.resampling(PANE_main_result, PANE_resampling, chromovec)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ludovica Molinaro. Author, maintainer. Francesco Montinaro. Author. Luciana DeGennaro. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Molinaro L, Montinaro F, DeGennaro L (2024). PANE: Principal component Ancestry proportions using NNLS Estimation. R package version 0.0.1.","code":"@Manual{,   title = {PANE: Principal component Ancestry proportions using NNLS Estimation},   author = {Ludovica Molinaro and Francesco Montinaro and Luciana DeGennaro},   year = {2024},   note = {R package version 0.0.1}, }"},{"path":"/index.html","id":"pane","dir":"","previous_headings":"","what":"Principal component Ancestry proportions using NNLS Estimation","title":"Principal component Ancestry proportions using NNLS Estimation","text":"PANE leverages PCA NNLS (Non-Negative Least Squares) assess ancestral composition admixed individuals high accuracy reliability. page find instructions basic usage, -depth tutorial go Articles > Tutorial (also accessible clicking three lines - top right page)","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Principal component Ancestry proportions using NNLS Estimation","text":"PANE requires following R packages:","code":"install.packages(\"devtools\") # if you have not installed \"devtools\" package devtools::install_github(\"lm-ut/PANE\") library(\"PANE\") install.packages(\"dplyr\") install.packages(\"nnls\") install.packages(\"ggplot2\")"},{"path":"/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Principal component Ancestry proportions using NNLS Estimation","text":"PANE estimations based PCA target source groups available. Along , suggest use additional groups better define PC space. PC space defined, set NNLS applied PC coordinates, effectively summarizing genetic ancestry. basic usage PANE needs: PCA matrix (dataframe N PCs) list target source groups (samples)","code":""},{"path":"/index.html","id":"basic-usage-example","dir":"","previous_headings":"Introduction","what":"Basic Usage Example","title":"Principal component Ancestry proportions using NNLS Estimation","text":"","code":"$ pca = read_eigen(pca_input = 'data/TOY.pca.evec') $ PANE_result = pane(pca_input = pca, sources = c('GST1','GST2'), admixed=c('70GST1.30GST2'))"},{"path":"/index.html","id":"reading-the-pca-matrix","dir":"","previous_headings":"Introduction > Basic Usage Example","what":"Reading the PCA Matrix","title":"Principal component Ancestry proportions using NNLS Estimation","text":"PANE package two functions read PCA matrix, read_eigen() read_flash(). read_eigen() read PCA created smartpca EIGENSOFT software. read_flash() instead, read PCA created flashpca software. goal functions set PCA file follows: neither read_eigen() read_flash() , might want simply use read.table(), set file aforementioned look.","code":""},{"path":"/index.html","id":"running-pane","dir":"","previous_headings":"Introduction > Basic Usage Example","what":"Running PANE","title":"Principal component Ancestry proportions using NNLS Estimation","text":"function pane() requires also list target reference groups: can provide list two ways. 1) can provide ‘AS_file’: file list Admixed groups () Source groups (S). want use PANE sample-wise rather group-wise, simply adjust PCA file ‘POP’ column identical ‘IND’ column, set AS_file samples list, rather group list. AS_file two-columns file population list first column, ‘/S’ information second column. ‘/S’ information stands Admixed () Source (S). population/group indicate whether PANE consider Source (S) admixed target (), file looks like : read AS_file, simple read_table(file, header=T) sufficient. PCA AS_file loaded, finally ready run PANE follows: 2) can avoid relying AS_file wish, using vector target source groups directly pane() function, follows:","code":"$ AS_file = read.table('data/Example_AS', header=TRUE) $ PANE_result = pane(pca_input = pca, as_file = AS_file) $ PANE_result = pane(pca_input = pca, sources = c('GST1','GST2'), admixed=c('70GST1.30GST2'))"},{"path":"/index.html","id":"writing-pane-output","dir":"","previous_headings":"Introduction > Basic Usage Example","what":"Writing PANE output","title":"Principal component Ancestry proportions using NNLS Estimation","text":"Finally, want save PANE results table-like format, can use write_pane():","code":"$ PANE_result <- pane(pca_input = pca, sources = c('GST1','GST2'), admixed=c('70GST1.30GST2')) $ write_pane(PANE_input = PANE_result, output_name = 'my_dir/my_pane_results.txt')"},{"path":"/index.html","id":"cite-pane","dir":"","previous_headings":"","what":"Cite PANE","title":"Principal component Ancestry proportions using NNLS Estimation","text":"use PANE, please cite BiorXiv preprint","code":""},{"path":"/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Principal component Ancestry proportions using NNLS Estimation","text":"questions bug reports please contact LM.","code":""},{"path":"/reference/evaluate_models.html","id":null,"dir":"Reference","previous_headings":"","what":"evaluate_models — evaluate_models","title":"evaluate_models — evaluate_models","text":"evaluate_models function takes PCA input analyses via NNLS describe admixed individuals mixture sources groups.","code":""},{"path":"/reference/evaluate_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"evaluate_models — evaluate_models","text":"","code":"evaluate_models(pca_input, as_file, sources = NULL, admixed = NULL)"},{"path":"/reference/evaluate_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"evaluate_models — evaluate_models","text":"pca_input R data.frame PCA N PCs as_file R data.frame two columns: POP /S, POP column lists populations considered, /S indicatea whether population considered Admixed ('') Source ('S') sources R vector indicating groups considered Sources admixed R vector indicating groups considered Admixed","code":""},{"path":"/reference/evaluate_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"evaluate_models — evaluate_models","text":"Returns list containing ancestries proportions per Admixed group","code":""},{"path":[]},{"path":"/reference/evaluate_nnls.mat2.html","id":null,"dir":"Reference","previous_headings":"","what":"evaluate_nnls.mat2 — evaluate_nnls.mat2","title":"evaluate_nnls.mat2 — evaluate_nnls.mat2","text":"evaluate_nnls.mat2 function solves nonnegative least squares problems. requires two matrices, one ('donors') refers source groups, second ('recipients') refers admixed groups","code":""},{"path":"/reference/evaluate_nnls.mat2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"evaluate_nnls.mat2 — evaluate_nnls.mat2","text":"","code":"evaluate_nnls.mat2(donors, recipients)"},{"path":"/reference/evaluate_nnls.mat2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"evaluate_nnls.mat2 — evaluate_nnls.mat2","text":"donors Matrix reference groups recipients Matrix target groups","code":""},{"path":"/reference/evaluate_nnls.mat2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"evaluate_nnls.mat2 — evaluate_nnls.mat2","text":"Returns matrix describing admixed groups mixture source groups, along residuals","code":""},{"path":"/reference/evaluate_nnls.mat2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"evaluate_nnls.mat2 — evaluate_nnls.mat2","text":"","code":"if (FALSE) { nnls.mat2(donors = my_source_individuals_matrix,recipients = my_admixed_individuals_matrix) }"},{"path":"/reference/nnls.mat2.html","id":null,"dir":"Reference","previous_headings":"","what":"nnls.mat2 — nnls.mat2","title":"nnls.mat2 — nnls.mat2","text":"nnls.mat2 function solves nonnegative least squares problems. requires two matrices, one ('donors') refers source groups, second ('recipients') refers admixed groups","code":""},{"path":"/reference/nnls.mat2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nnls.mat2 — nnls.mat2","text":"","code":"nnls.mat2(donors, recipients)"},{"path":"/reference/nnls.mat2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nnls.mat2 — nnls.mat2","text":"donors Matrix reference groups recipients Matrix target groups","code":""},{"path":"/reference/nnls.mat2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nnls.mat2 — nnls.mat2","text":"Returns matrix describing admixed groups mixture source groups, along residuals","code":""},{"path":"/reference/nnls.mat2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"nnls.mat2 — nnls.mat2","text":"","code":"if (FALSE) { nnls.mat2(donors = my_source_individuals_matrix,recipients = my_admixed_individuals_matrix) }"},{"path":"/reference/pane.html","id":null,"dir":"Reference","previous_headings":"","what":"pane — pane","title":"pane — pane","text":"pane() function takes PCA input analyses via NNLS describe admixed individuals mixture sources groups.","code":""},{"path":"/reference/pane.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pane — pane","text":"","code":"pane(pca_input, as_file, sources = NULL, admixed = NULL)"},{"path":"/reference/pane.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pane — pane","text":"pca_input R data.frame PCA N PCs as_file R data.frame two columns: POP /S, POP column lists populations considered, /S indicatea whether population considered Admixed ('') Source ('S') sources R vector indicating groups considered Sources admixed R vector indicating groups considered Admixed","code":""},{"path":"/reference/pane.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pane — pane","text":"Returns list containing ancestries proportions per Admixed group","code":""},{"path":[]},{"path":"/reference/pcs_distances.html","id":null,"dir":"Reference","previous_headings":"","what":"pcs_distances — pcs_distances","title":"pcs_distances — pcs_distances","text":"pcs_distances allows estimate cumulative euclidean distances PCs Sources, plot results (return_plot = 'YES').","code":""},{"path":"/reference/pcs_distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pcs_distances — pcs_distances","text":"","code":"pcs_distances(pca_input, output_name, sources_file, return_plot = NULL)"},{"path":"/reference/pcs_distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pcs_distances — pcs_distances","text":"pca_input Dataframe table PCA results output_name String indicating output name sources_file Two columns table: S1 S2. Contains pairs sources compared. return_plot NULL default 'YES' plot ggplot2","code":""},{"path":"/reference/pcs_distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pcs_distances — pcs_distances","text":"Returns output_name.csv file cumulative distances Returns output_name.pdf file cumulative distances","code":""},{"path":"/reference/pcs_distances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pcs_distances — pcs_distances","text":"","code":"if (FALSE) { Source_D = read.table('data/Sources_Distances', header =T) pca = read_flash(pca_input = 'data/TOY_flash.pca') pcs_distances(pca, 'data/output_distances', sources_file = Source_D, return_plot = 'YES') }"},{"path":"/reference/plot_pane.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_pane — plot_pane","title":"plot_pane — plot_pane","text":"plot_pane allows plot pane assignations barplot, using either R base (default) ggplot2 (type_ggplot = 'YES')","code":""},{"path":"/reference/plot_pane.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_pane — plot_pane","text":"","code":"plot_pane(pane_result, output_name, type_ggplot = NULL)"},{"path":"/reference/plot_pane.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_pane — plot_pane","text":"pane_result matrix returned pane() output_name output name pane pdf plot type_ggplot NULL default 'YES' plot ggplot2","code":""},{"path":"/reference/plot_pane.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot_pane — plot_pane","text":"Returns pane_plot.pdf file working directory","code":""},{"path":"/reference/read.resampling.html","id":null,"dir":"Reference","previous_headings":"","what":"read.resampling — read.resampling","title":"read.resampling — read.resampling","text":"read.resampling reads resampled PCAs performs PANE one. returns list containing PANE results per resampling. output can used se.resampling function, estimate standard error.","code":""},{"path":"/reference/read.resampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read.resampling — read.resampling","text":"","code":"read.resampling(path_tofiles, file_pattern, as_file, eigentype)"},{"path":"/reference/read.resampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read.resampling — read.resampling","text":"path_tofiles string containing directory path resampling files. file_pattern string containing common pattern find PCAs obtained resampling as_file R data.frame two columns: POP /S, POP column lists populations considered, /S indicates whether population considered Admixed ('') Source ('S') eigentype present, PCA read read_eigen() function, absent PCA loaded via read_flash()","code":""},{"path":"/reference/read.resampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read.resampling — read.resampling","text":"Returns table containing PANE results per resampled set.","code":""},{"path":"/reference/read.resampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read.resampling — read.resampling","text":"","code":"if (FALSE) { example_as = read.table('data/Example_AS', header=TRUE) pca_jackknife = read.resampling(path_tofiles = 'data/', file_pattern = '*_Jack*', as_file = example_as, eigentype) #OR pca_jackknife = read.resampling(path_tofiles = 'data/', file_pattern = '*_Jack*', as_file = example_as) }"},{"path":"/reference/read_eigen.html","id":null,"dir":"Reference","previous_headings":"","what":"read_eigen — read_eigen","title":"read_eigen — read_eigen","text":"read_eigen reads smartpca output EIGENSTRAT, first column contains Family ID, second sample ID, following PCs","code":""},{"path":"/reference/read_eigen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_eigen — read_eigen","text":"","code":"read_eigen(pca_input)"},{"path":"/reference/read_eigen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_eigen — read_eigen","text":"pca_input points directory pca.evec file","code":""},{"path":"/reference/read_eigen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read_eigen — read_eigen","text":"Returns PCA matrix new header: POP ID PC1 PCN CC","code":""},{"path":"/reference/read_eigen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read_eigen — read_eigen","text":"","code":"if (FALSE) { read_eigen(pca_input = 'data/TOY.pca.evec') }"},{"path":"/reference/read_flash.html","id":null,"dir":"Reference","previous_headings":"","what":"read_flash — read_flash","title":"read_flash — read_flash","text":"read_flash reads PCA output flashpca, first column contains Family ID, second sample ID, following PCs","code":""},{"path":"/reference/read_flash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_flash — read_flash","text":"","code":"read_flash(pca_input)"},{"path":"/reference/read_flash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_flash — read_flash","text":"pca_input point directory flash pca file","code":""},{"path":"/reference/read_flash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read_flash — read_flash","text":"Returns PCA matrix new header: POP ID PC1 PCN","code":""},{"path":"/reference/read_flash.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read_flash — read_flash","text":"","code":"if (FALSE) { read_flash(pca_input = 'data/TOY_flash.pca') }"},{"path":"/reference/se.resampling.html","id":null,"dir":"Reference","previous_headings":"","what":"se.resampling — se.resampling","title":"se.resampling — se.resampling","text":"se.resampling estimates Standard Error comparing main PANE run multiple PANE runs, example runs obtained jackknife resampling. se.resampling takes three inputs: list main PANE result, list resampling PANE results, numeric vector containing number SNPs per chromosome.","code":""},{"path":"/reference/se.resampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"se.resampling — se.resampling","text":"","code":"se.resampling(nnls_main, nnls_resampling, chromovec)"},{"path":"/reference/se.resampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"se.resampling — se.resampling","text":"nnls_main list obtained pane() function main set. nnls_resampling list contining multilpe pane() function results, resampled set. chromovec numeric vector containing number SNPs per chromosome (ie. chromovec = rep(1000,times = 22))","code":""},{"path":"/reference/se.resampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"se.resampling — se.resampling","text":"Returns table containing standard error per target given source group.","code":""},{"path":"/reference/se.resampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"se.resampling — se.resampling","text":"","code":"if (FALSE) { se.resampling(nnls_main = pane_main, nnls_resampling = pane_resampling, chromovec) }"},{"path":"/reference/write_pane.html","id":null,"dir":"Reference","previous_headings":"","what":"write_pane — write_pane","title":"write_pane — write_pane","text":"write_pane allows save pane results table-like format.","code":""},{"path":"/reference/write_pane.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"write_pane — write_pane","text":"","code":"write_pane(pane_input, output_name)"},{"path":"/reference/write_pane.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"write_pane — write_pane","text":"pane_input R list returned pane() function output_name string containing file output name","code":""},{"path":"/reference/write_pane.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"write_pane — write_pane","text":"","code":"if (FALSE) { pca = read_eigen(pca_input = 'data/TOY.pca.evec') example_as = read.table('data/Example_AS', header=TRUE) pane_results <- pane(pca_input = pca, as_file = example_as) write_pane(pane_input = pane_results, output_name = 'my_dir/my_pane_results.txt') }"}]
